// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`inStockNotification should show notification form because there is a productNumber, showForm is true, and confirmationMessage is null 1`] = `
<InStockNotification
  confirmationIsFetching={false}
  confirmationMessage={null}
  email="someone@someplace.com"
  isFetching={false}
  productNumber="testProductNumber"
  sendRequest={[Function]}
  showConfirmationModal={[Function]}
  showForm={true}
  variantNumber="testVariantNumber"
>
  <NotificationForm
    email="someone@someplace.com"
    isFetching={false}
    productNumber="testProductNumber"
    sendRequest={[Function]}
    variantNumber="testVariantNumber"
  >
    <div
      className="css-1q1mvko"
    >
      <HeaderButton
        onClick={[Function]}
        text="inStockNotification.header.before_submit"
      >
        <button
          className={
            Object {
              "data-css-wmlzrp": "",
            }
          }
          onClick={[Function]}
        >
          <div>
            <Translate
              className=""
              params={Object {}}
              string="inStockNotification.header.before_submit"
            >
              <span
                className=""
              >
                inStockNotification.header.before_submit
              </span>
            </Translate>
          </div>
        </button>
      </HeaderButton>
      <div
        className="css-159u6xo"
      >
        <Form
          onSubmit={[Function]}
        >
          <form
            action="#"
            onKeyPress={[Function]}
            onSubmit={[Function]}
          >
            <TextField
              className=""
              errorText=""
              hintText=""
              isControlled={false}
              label="inStockNotification.form.input.label"
              multiLine={false}
              name="notification-email"
              onChange={[Function]}
              onFocusChange={[Function]}
              onSanitize={[Function]}
              onValidate={[Function]}
              password={false}
              setRef={[Function]}
              translateErrorText={true}
              type="email"
              value="someone@someplace.com"
            >
              <div
                className="css-e4z0u6 "
              >
                <Hint
                  hintText=""
                  visible={false}
                >
                  <div
                    className="css-tnfb18 css-1jyyyen"
                  >
                    <Translate
                      className=""
                      params={Object {}}
                      string=""
                    />
                  </div>
                </Hint>
                <Label
                  hasErrorMessage={false}
                  isFloating={true}
                  isFocused={false}
                  label="inStockNotification.form.input.label"
                  name="notification-email"
                >
                  <label
                    className="css-u7lqu6 css-16msjt6 css-1fekhao"
                    htmlFor="notification-email"
                  >
                    <Translate
                      className=""
                      params={Object {}}
                      string="inStockNotification.form.input.label"
                    >
                      <span
                        className=""
                      >
                        inStockNotification.form.input.label
                      </span>
                    </Translate>
                  </label>
                </Label>
                <FormElement
                  id="notification-email"
                  isControlled={false}
                  multiLine={false}
                  name="notification-email"
                  onChange={[Function]}
                  onFocusChange={[Function]}
                  onSanitize={[Function]}
                  onValidate={[Function]}
                  password={false}
                  setRef={[Function]}
                  type="email"
                  value="someone@someplace.com"
                >
                  <Component
                    className="css-keangt"
                    id="notification-email"
                    isControlled={false}
                    multiLine={false}
                    name="notification-email"
                    onChange={[Function]}
                    onFocusChange={[Function]}
                    onSanitize={[Function]}
                    onValidate={[Function]}
                    password={false}
                    setRef={[Function]}
                    type="email"
                    validateOnBlur={true}
                    value="someone@someplace.com"
                  >
                    <SimpleInput
                      autoComplete={false}
                      autoCorrect={false}
                      className="css-keangt"
                      disabled={false}
                      id="notification-email"
                      isControlled={false}
                      multiLine={false}
                      name="notification-email"
                      onChange={[Function]}
                      onFocusChange={[Function]}
                      onKeyPress={[Function]}
                      onSanitize={[Function]}
                      onValidate={[Function]}
                      password={false}
                      setRef={[Function]}
                      type="email"
                      validateOnBlur={true}
                      value="someone@someplace.com"
                    >
                      <input
                        autoComplete="off"
                        autoCorrect="off"
                        className="css-keangt"
                        disabled={false}
                        id="notification-email"
                        name="notification-email"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyPress={[Function]}
                        type="email"
                        value="someone@someplace.com"
                      />
                    </SimpleInput>
                  </Component>
                </FormElement>
                <Underline
                  hasErrorMessage={false}
                  isFocused={false}
                >
                  <div
                    className="css-ycal4l"
                  >
                    <div
                      className="css-1tpmuef"
                      style={
                        Object {
                          "borderBottomColor": undefined,
                          "transform": "scale3d(0,1,1)",
                        }
                      }
                    />
                  </div>
                </Underline>
                <ErrorText
                  className=""
                  errorText=""
                  translate={true}
                  validationError={null}
                >
                  <div
                    className=" css-hmgfge"
                  >
                    <Translate
                      className=""
                      params={Object {}}
                      string=""
                    />
                  </div>
                </ErrorText>
              </div>
            </TextField>
            <ActionButton
              className="css-1a5gmoq"
              disabled={false}
              flat={true}
              loading={false}
              noGap={false}
              onClick={[Function]}
              rippleClassName=""
              rippleSize={null}
              testId={null}
              type="secondary"
              wrapContent={true}
            >
              <div
                className="css-omcrdt"
                data-test-id={null}
              >
                <RippleButton
                  className="css-1a5gmoq"
                  disabled={false}
                  flat={true}
                  onClick={[Function]}
                  rippleClassName=""
                  rippleSize={null}
                  testId="Button"
                  type="secondary"
                  wrapContent={true}
                >
                  <Button
                    className="css-1a5gmoq"
                    disabled={false}
                    flat={true}
                    onClick={[Function]}
                    testId="Button"
                    type="secondary"
                    wrapContent={false}
                  >
                    <Button
                      className="css-dh0pju css-1a5gmoq"
                      disabled={false}
                      onClick={[Function]}
                      testId="Button"
                    >
                      <button
                        className="css-dh0pju css-1a5gmoq css-1rn65c0"
                        data-test-id="Button"
                        disabled={false}
                        onClick={[Function]}
                      >
                        <Ripple
                          className="css-1fscwua "
                          color="#000"
                          disabled={false}
                          fill={true}
                          onClick={[Function]}
                          onComplete={[Function]}
                          overflow={false}
                          size={null}
                        >
                          <div
                            aria-hidden={true}
                            className="css-1fscwua "
                            data-test-id="Ripple"
                            onClick={[Function]}
                            style={
                              Object {
                                "overflow": "hidden",
                                "position": "relative",
                              }
                            }
                          >
                            <Translate
                              className=""
                              params={Object {}}
                              string="inStockNotification.form.submit"
                            >
                              <span
                                className=""
                              >
                                inStockNotification.form.submit
                              </span>
                            </Translate>
                          </div>
                        </Ripple>
                      </button>
                    </Button>
                  </Button>
                </RippleButton>
              </div>
            </ActionButton>
          </form>
        </Form>
      </div>
    </div>
  </NotificationForm>
</InStockNotification>
`;

exports[`inStockNotification should show notification while fetching 1`] = `
<InStockNotification
  confirmationIsFetching={false}
  confirmationMessage={null}
  email="someone@someplace.com"
  isFetching={true}
  productNumber="testProductNumber"
  sendRequest={[Function]}
  showConfirmationModal={[Function]}
  showForm={true}
  variantNumber="testVariantNumber"
>
  <NotificationForm
    email="someone@someplace.com"
    isFetching={false}
    productNumber="testProductNumber"
    sendRequest={[Function]}
    variantNumber="testVariantNumber"
  >
    <div
      className="css-1q1mvko"
    >
      <HeaderButton
        onClick={[Function]}
        text="inStockNotification.header.before_submit"
      >
        <button
          className={
            Object {
              "data-css-wmlzrp": "",
            }
          }
          onClick={[Function]}
        >
          <div>
            <Translate
              className=""
              params={Object {}}
              string="inStockNotification.header.before_submit"
            >
              <span
                className=""
              >
                inStockNotification.header.before_submit
              </span>
            </Translate>
          </div>
        </button>
      </HeaderButton>
      <div
        className="css-159u6xo"
      >
        <Form
          onSubmit={[Function]}
        >
          <form
            action="#"
            onKeyPress={[Function]}
            onSubmit={[Function]}
          >
            <TextField
              className=""
              errorText=""
              hintText=""
              isControlled={false}
              label="inStockNotification.form.input.label"
              multiLine={false}
              name="notification-email"
              onChange={[Function]}
              onFocusChange={[Function]}
              onSanitize={[Function]}
              onValidate={[Function]}
              password={false}
              setRef={[Function]}
              translateErrorText={true}
              type="email"
              value="someone@someplace.com"
            >
              <div
                className="css-e4z0u6 "
              >
                <Hint
                  hintText=""
                  visible={false}
                >
                  <div
                    className="css-tnfb18 css-1jyyyen"
                  >
                    <Translate
                      className=""
                      params={Object {}}
                      string=""
                    />
                  </div>
                </Hint>
                <Label
                  hasErrorMessage={false}
                  isFloating={true}
                  isFocused={false}
                  label="inStockNotification.form.input.label"
                  name="notification-email"
                >
                  <label
                    className="css-u7lqu6 css-16msjt6 css-1fekhao"
                    htmlFor="notification-email"
                  >
                    <Translate
                      className=""
                      params={Object {}}
                      string="inStockNotification.form.input.label"
                    >
                      <span
                        className=""
                      >
                        inStockNotification.form.input.label
                      </span>
                    </Translate>
                  </label>
                </Label>
                <FormElement
                  id="notification-email"
                  isControlled={false}
                  multiLine={false}
                  name="notification-email"
                  onChange={[Function]}
                  onFocusChange={[Function]}
                  onSanitize={[Function]}
                  onValidate={[Function]}
                  password={false}
                  setRef={[Function]}
                  type="email"
                  value="someone@someplace.com"
                >
                  <Component
                    className="css-keangt"
                    id="notification-email"
                    isControlled={false}
                    multiLine={false}
                    name="notification-email"
                    onChange={[Function]}
                    onFocusChange={[Function]}
                    onSanitize={[Function]}
                    onValidate={[Function]}
                    password={false}
                    setRef={[Function]}
                    type="email"
                    validateOnBlur={true}
                    value="someone@someplace.com"
                  >
                    <SimpleInput
                      autoComplete={false}
                      autoCorrect={false}
                      className="css-keangt"
                      disabled={false}
                      id="notification-email"
                      isControlled={false}
                      multiLine={false}
                      name="notification-email"
                      onChange={[Function]}
                      onFocusChange={[Function]}
                      onKeyPress={[Function]}
                      onSanitize={[Function]}
                      onValidate={[Function]}
                      password={false}
                      setRef={[Function]}
                      type="email"
                      validateOnBlur={true}
                      value="someone@someplace.com"
                    >
                      <input
                        autoComplete="off"
                        autoCorrect="off"
                        className="css-keangt"
                        disabled={false}
                        id="notification-email"
                        name="notification-email"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyPress={[Function]}
                        type="email"
                        value="someone@someplace.com"
                      />
                    </SimpleInput>
                  </Component>
                </FormElement>
                <Underline
                  hasErrorMessage={false}
                  isFocused={false}
                >
                  <div
                    className="css-ycal4l"
                  >
                    <div
                      className="css-1tpmuef"
                      style={
                        Object {
                          "borderBottomColor": undefined,
                          "transform": "scale3d(0,1,1)",
                        }
                      }
                    />
                  </div>
                </Underline>
                <ErrorText
                  className=""
                  errorText=""
                  translate={true}
                  validationError={null}
                >
                  <div
                    className=" css-hmgfge"
                  >
                    <Translate
                      className=""
                      params={Object {}}
                      string=""
                    />
                  </div>
                </ErrorText>
              </div>
            </TextField>
            <ActionButton
              className="css-1a5gmoq"
              disabled={false}
              flat={true}
              loading={false}
              noGap={false}
              onClick={[Function]}
              rippleClassName=""
              rippleSize={null}
              testId={null}
              type="secondary"
              wrapContent={true}
            >
              <div
                className="css-omcrdt"
                data-test-id={null}
              >
                <RippleButton
                  className="css-1a5gmoq"
                  disabled={false}
                  flat={true}
                  onClick={[Function]}
                  rippleClassName=""
                  rippleSize={null}
                  testId="Button"
                  type="secondary"
                  wrapContent={true}
                >
                  <Button
                    className="css-1a5gmoq"
                    disabled={false}
                    flat={true}
                    onClick={[Function]}
                    testId="Button"
                    type="secondary"
                    wrapContent={false}
                  >
                    <Button
                      className="css-dh0pju css-1a5gmoq"
                      disabled={false}
                      onClick={[Function]}
                      testId="Button"
                    >
                      <button
                        className="css-dh0pju css-1a5gmoq css-1rn65c0"
                        data-test-id="Button"
                        disabled={false}
                        onClick={[Function]}
                      >
                        <Ripple
                          className="css-1fscwua "
                          color="#000"
                          disabled={false}
                          fill={true}
                          onClick={[Function]}
                          onComplete={[Function]}
                          overflow={false}
                          size={null}
                        >
                          <div
                            aria-hidden={true}
                            className="css-1fscwua "
                            data-test-id="Ripple"
                            onClick={[Function]}
                            style={
                              Object {
                                "overflow": "hidden",
                                "position": "relative",
                              }
                            }
                          >
                            <Translate
                              className=""
                              params={Object {}}
                              string="inStockNotification.form.submit"
                            >
                              <span
                                className=""
                              >
                                inStockNotification.form.submit
                              </span>
                            </Translate>
                          </div>
                        </Ripple>
                      </button>
                    </Button>
                  </Button>
                </RippleButton>
              </div>
            </ActionButton>
          </form>
        </Form>
      </div>
    </div>
  </NotificationForm>
</InStockNotification>
`;

exports[`inStockNotification should show only HeaderButton because there is a confirmation notice 1`] = `
<InStockNotification
  confirmationIsFetching={false}
  confirmationMessage="some message"
  email={null}
  productNumber={null}
  sendRequest={[Function]}
  showConfirmationModal={[Function]}
  showForm={false}
  variantNumber={null}
>
  <HeaderButton
    onClick={[Function]}
    text="inStockNotification.header.after_submit"
  >
    <button
      className={
        Object {
          "data-css-wmlzrp": "",
        }
      }
      onClick={[Function]}
    >
      <div>
        <Translate
          className=""
          params={Object {}}
          string="inStockNotification.header.after_submit"
        >
          <span
            className=""
          >
            inStockNotification.header.after_submit
          </span>
        </Translate>
      </div>
    </button>
  </HeaderButton>
</InStockNotification>
`;
